"""
Django settings for ottomano project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import socket
import sys
from pathlib import Path

from django.conf.locale.it import formats as it_formats

NOME_COMPUTER = socket.gethostname()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f1pg&okn@s-dgf84v#i+*+qfso_8!e8k)vr)3ni$6(0e1a@kp_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if NOME_COMPUTER.lower() == 'srvdc1':
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = ['127.0.0.1', '192.168.2.143', '192.168.2.170', 'ottomano.pythonanywhere.com', 'pc-masi']

# Application definition

INSTALLED_APPS = [
    'attrezzi.apps.AttrezziConfig',
    'mezzi.apps.MezziConfig',
    'personale.apps.PersonaleConfig',
    'sgi.apps.SgiConfig',
    'esterni.apps.EsterniConfig',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ottomano.urls'

if sys.platform == 'win32':
    if NOME_COMPUTER.lower() == 'srvdc1':
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [r'D:\Gestionale\ottomano\templates', ],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
    else:
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [r'C:\Users\L. MASI\Documents\Programmi\ottomano\ottomano\ottomano\templates',
                         ],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
else:
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': ['/home/ottomano/ottomano/ottomano/templates', ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

WSGI_APPLICATION = 'ottomano.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'it-IT'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True

it_formats.DATE_FORMAT = "d/m/y"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

if NOME_COMPUTER.lower() == 'srvdc1':
    STATICFILES_DIRS = [
        r'D:\Gestionale\Documenti_Lavoratori',
        r'D:\Gestionale\Documenti_Mezzi',
        r'D:\Gestionale\Documenti_Attrezzi',
        r'D:\Gestionale\Documenti_Cantieri',
        r'D:\Gestionale\Documenti_Estratti',
    ]
else:
    STATICFILES_DIRS = [
        r'C:\Users\L. MASI\Documents\Documenti_Lavoratori',
        r'C:\Users\L. MASI\Documents\Documenti_Mezzi',
        r'C:\Users\L. MASI\Documents\Documenti_Attrezzi',
        r'C:\Users\L. MASI\Documents\Documenti_Cantieri',
        r'C:\Users\L. MASI\Documents\Documenti_Estratti',
    ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging
import os
import sys

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)  # crea la cartella se non esiste


def make_file_handler(level, filename):
    return {
        'level': level,
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': os.path.join(LOG_DIR, filename),
        'maxBytes': 1024 * 1024 * 5,  # 5MB
        'backupCount': 3,
        'formatter': 'verbose',
        'encoding': 'utf-8',
    }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # Formatter
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} - {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}: {message}',
            'style': '{',
        },
    },

    # Handler
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simple',
        },
        'debug_file': make_file_handler('DEBUG', 'debug.log'),
        'info_file': make_file_handler('INFO', 'info.log'),
        'warning_file': make_file_handler('WARNING', 'warning.log'),
        'error_file': make_file_handler('ERROR', 'errors.log'),
        'critical_file': make_file_handler('CRITICAL', 'critical.log'),
        'print_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'print.log'),
            'maxBytes': 1024 * 1024 * 2,
            'backupCount': 3,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
    },

    # Logger
    'loggers': {
        'django': {
            'handlers': [
                'console',
                'debug_file',
                'info_file',
                'warning_file',
                'error_file',
                'critical_file',
            ],
            'level': 'INFO',  # puoi usare 'INFO' in produzione
            'propagate': True,
        },
        'print_logger': {
            'handlers': ['print_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
